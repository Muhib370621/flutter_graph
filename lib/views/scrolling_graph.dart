import 'dart:developer';

import 'package:chart_sparkline/chart_sparkline.dart';
import 'package:demo_app/views/graph_painter.dart';
import 'package:flutter/material.dart';
import 'dart:async';

class ScrollingGraph extends StatefulWidget {
  @override
  _ScrollingGraphState createState() => _ScrollingGraphState();
}

class _ScrollingGraphState extends State<ScrollingGraph> {
  final List<double> stressData = [];
  final List<double> relaxData = [];
  final List<double> calmData = [];
  final List<double> hrData = [];
  final ScrollController _scrollController = ScrollController();
  late Timer _timer;
  double xValue = 0;

  @override
  void initState() {
    super.initState();
    formData();
    // _generateInitialData();
    // _startUpdatingData();
  }

  // void _generateInitialData() {
  //   for (double i = 0; i < 100; i++) {
  //     stressData.add((i % 10) * 5 + 10);
  //     relaxData.add((i % 15) * 3 + 20);
  //     calmData.add((i % 20) * 2 + 30);
  //     hrData.add((i % 25) * 1 + 15);
  //   }
  // }

  var calm = [
    0.0422721,
    0.0415934,
    0.0414645,
    0.0415408,
    0.0424587,
    0.0432139,
    0.0440856,
    0.0451455,
    0.0457916,
    0.0471366,
    0.0509864,
    0.0570811,
    0.0649728,
    0.0728035,
    0.0783473,
    0.0830967,
    0.0861907,
    0.127766,
    0.172221,
    0.209642,
    0.239041,
    0.270694,
    0.287813,
    0.303119,
    0.314516,
    0.32251,
    0.332325,
    0.341066,
    0.355785,
    0.381412,
    0.412871,
    0.446107,
    0.534924,
    0.565472,
    0.594202,
    0.615986,
    0.644232,
    0.671978,
    0.692511,
    0.720032,
    0.746165,
    0.770894,
    0.788097,
    0.809152,
    0.828828,
    0.842523,
    0.858742,
    0.871523,
    0.878435,
    0.885297,
    0.88984,
    0.903654,
    0.905551,
    0.908205,
    0.91102,
    0.91552,
    0.919973,
    0.927218,
    0.935134,
    0.941032,
    0.960827,
    0.968885,
    0.96703,
    0.963712,
    0.957793,
    0.952049,
    0.943879,
    0.935204,
    0.928064,
    0.918291,
    0.909784,
    0.89714,
    0.887596,
    0.874762,
    0.861984,
    0.852618,
    0.840012,
    0.830738,
    0.818708,
    0.806682,
    0.794967,
    0.786283,
    0.775147,
    0.767065,
    0.756492,
    0.748942,
    0.739479,
    0.73058,
    0.709374,
    0.700659,
    0.694228,
    0.685837,
    0.679993,
    0.672583,
    0.667179,
    0.659972,
    0.654829,
    0.648277,
    0.642056,
    0.637645,
    0.631824,
    0.628932,
    0.625342,
    0.620556,
    0.614982,
    0.608386,
    0.601243,
    0.593513,
    0.585429,
    0.577221,
    0.56897,
    0.560654,
    0.552871,
    0.545294,
    0.538256,
    0.5311,
    0.524641,
    0.518304,
    0.512498,
    0.506931,
    0.501584,
    0.496399,
    0.491049,
    0.485552,
    0.480341,
    0.467003,
    0.462381,
    0.457919,
    0.452919,
    0.448015,
    0.442756,
    0.438289,
    0.434152,
    0.430219,
    0.425923,
    0.421967,
    0.418402,
    0.408805,
    0.406182,
    0.40398,
    0.40204,
    0.400035,
    0.397764,
    0.396041,
    0.394724,
    0.394592,
    0.394846,
    0.395585,
    0.396992,
    0.398135,
    0.399188,
    0.400108,
    0.400869,
    0.400862,
    0.400484,
    0.400761,
    0.400819,
    0.400804,
    0.400592,
    0.400512,
    0.400897,
    0.401584,
    0.402797,
    0.404422,
    0.40552,
    0.406618,
    0.407691,
    0.408597,
    0.409796,
    0.410799,
    0.412188,
    0.413447,
    0.414847,
    0.416802,
    0.418803,
    0.420788,
    0.422826,
    0.424283,
    0.425974,
    0.427511,
    0.42924,
    0.431124,
    0.433093,
    0.435217,
    0.437271,
    0.439409,
    0.441585,
    0.444354,
    0.45942,
    0.466365,
    0.473439,
    0.481653,
    0.490629,
    0.499608,
    0.509544,
    0.519863,
    0.530985,
    0.542606,
    0.554779,
    0.566583,
    0.579779,
    0.593146,
    0.607127,
    0.622217,
    0.637765,
    0.686365,
    0.739744,
    0.757528,
    0.777054,
    0.798072,
    0.820412,
    0.845749,
    0.873152,
    0.902711,
    0.934173,
    0.967222,
    1.00465,
    1.04229,
    1.0826,
    1.12443,
    1.17065,
    1.21483,
    1.26532,
    1.31632,
    1.37043,
    1.42997,
    1.49394,
    1.56374,
    1.63825,
    1.71272,
    1.795,
    1.88229,
    1.96622,
    2.05614,
    2.14708,
    2.23686,
    2.33464,
    2.43105,
    2.52958,
    2.63279,
    2.73615,
    2.84324,
    2.95187,
    3.06173,
    3.16669,
    3.41944,
    3.49323,
    3.52984,
    3.56663,
    3.56338,
    3.55365,
    3.53578,
    3.5095,
    3.47567,
    3.43388,
    3.39348,
    3.34923,
    3.30331,
    3.25791,
    3.20902,
    3.16522,
    3.04999,
    2.95319,
    2.86953,
    2.84412,
    2.81888,
    2.79482,
    2.77152,
    2.74733,
    2.7266,
    2.70595,
    2.68771,
  ];
  var stress = [
    95.466,
    95.5608,
    95.6411,
    95.6179,
    95.601,
    95.4866,
    95.4244,
    95.3631,
    95.2314,
    94.9233,
    93.8821,
    92.9679,
    91.2592,
    89.2215,
    86.8709,
    84.544,
    82.9729,
    78.4718,
    75.0667,
    72.8788,
    70.3052,
    68.0242,
    66.19,
    64.3122,
    62.9068,
    61.9223,
    61.0309,
    60.5384,
    60.6825,
    60.1561,
    59.1337,
    57.9448,
    54.7892,
    53.7613,
    52.7834,
    52.0971,
    51.2571,
    50.4679,
    49.9009,
    49.1538,
    48.4978,
    47.8588,
    47.3836,
    46.8341,
    46.3656,
    45.9393,
    45.3919,
    44.7906,
    44.3692,
    43.8435,
    43.4792,
    41.0761,
    40.3639,
    39.5624,
    38.646,
    37.7606,
    37.2224,
    36.4369,
    35.5229,
    34.8649,
    32.7727,
    31.1453,
    30.4211,
    30.1352,
    29.5924,
    29.3018,
    28.8909,
    28.6379,
    28.4443,
    28.2189,
    27.9195,
    27.8059,
    27.7476,
    27.5826,
    27.4782,
    27.3803,
    27.3681,
    27.3584,
    27.2322,
    27.2642,
    27.3019,
    27.3291,
    27.2875,
    27.2756,
    27.2468,
    27.219,
    27.2334,
    27.2606,
    27.2707,
    27.2946,
    27.3105,
    27.3199,
    27.3505,
    27.3722,
    27.395,
    27.4298,
    27.4742,
    27.5099,
    27.5475,
    27.5721,
    27.5957,
    27.518,
    27.4936,
    27.4994,
    27.5392,
    27.6158,
    27.7024,
    27.7361,
    27.7854,
    28.0826,
    28.2081,
    28.2839,
    28.3988,
    28.5419,
    28.5998,
    28.8021,
    28.8687,
    28.8918,
    28.8761,
    28.9698,
    29.0435,
    29.1682,
    29.3521,
    29.5383,
    29.5891,
    30.8163,
    30.8347,
    30.7491,
    31.5474,
    32.2294,
    33.1035,
    33.9883,
    34.9679,
    35.6418,
    36.2075,
    36.5189,
    37.0233,
    38.8688,
    39.198,
    39.618,
    40.4306,
    41.1553,
    42.0993,
    42.8933,
    43.6743,
    44.3572,
    45.0759,
    46.0508,
    46.8305,
    47.6158,
    48.1597,
    48.4936,
    48.7241,
    49.2022,
    49.293,
    49.3429,
    49.3568,
    49.3749,
    49.3732,
    49.4023,
    49.3754,
    49.4255,
    49.4992,
    49.4168,
    49.4267,
    49.4258,
    49.4106,
    49.3445,
    49.3756,
    49.3921,
    49.3956,
    49.4913,
    49.77,
    50.1259,
    50.3274,
    50.5976,
    50.7767,
    50.8375,
    50.7653,
    50.7018,
    50.6956,
    50.5584,
    50.3527,
    50.4819,
    50.9129,
    51.0135,
    51.5958,
    52.0459,
    52.1832,
    52.0364,
    51.8559,
    51.6321,
    51.2865,
    50.8202,
    50.4025,
    49.8691,
    49.3594,
    48.7682,
    48.1297,
    47.6971,
    47.0261,
    46.3797,
    45.875,
    45.3885,
    44.7668,
    42.8824,
    41.0344,
    40.4594,
    39.8021,
    39.1255,
    38.4338,
    37.627,
    36.7637,
    35.8623,
    34.9267,
    33.9802,
    32.986,
    32.036,
    31.1054,
    30.2182,
    29.2924,
    28.4895,
    27.6432,
    26.8008,
    26.009,
    25.1749,
    24.3337,
    23.4748,
    22.6235,
    21.8386,
    21.0264,
    20.2343,
    19.5177,
    18.7883,
    18.0819,
    17.3797,
    16.6626,
    15.9869,
    15.3329,
    14.6788,
    14.0877,
    13.5465,
    13.0456,
    12.6013,
    12.2316,
    11.1883,
    11.0453,
    11.0862,
    10.6994,
    10.7228,
    10.7894,
    10.8883,
    11.0128,
    11.1387,
    11.3009,
    11.4982,
    11.7268,
    11.9769,
    12.2185,
    12.4586,
    12.6564,
    13.1939,
    13.6421,
    14.102,
    14.2505,
    14.4006,
    14.5531,
    14.7028,
    14.8596,
    14.9972,
    15.1338,
    15.2655,
  ];
  var relax = [
    4.03554,
    3.9747,
    3.96571,
    3.97205,
    4.0591,
    4.12635,
    4.20685,
    4.30522,
    4.3608,
    4.47437,
    4.78671,
    5.30672,
    5.92937,
    6.49564,
    6.8061,
    7.02533,
    7.15149,
    10.026,
    12.928,
    15.2785,
    16.8058,
    18.4137,
    19.0503,
    19.4942,
    19.7852,
    19.9706,
    20.2821,
    20.6476,
    21.5899,
    22.9442,
    24.4146,
    25.8496,
    29.3081,
    30.4005,
    31.364,
    32.0911,
    33.0215,
    33.9133,
    34.5569,
    35.3923,
    36.1874,
    36.8941,
    37.3429,
    37.8959,
    38.4291,
    38.705,
    38.9799,
    39.036,
    38.9754,
    38.8145,
    38.6895,
    37.1186,
    36.5515,
    35.9308,
    35.2073,
    34.5705,
    34.2436,
    33.785,
    33.2187,
    32.809,
    31.4889,
    30.1762,
    29.4181,
    29.0416,
    28.3434,
    27.8968,
    27.2695,
    26.7822,
    26.3981,
    25.9132,
    25.4007,
    24.9458,
    24.6287,
    24.1282,
    23.6858,
    23.3449,
    22.9895,
    22.7276,
    22.2953,
    21.9935,
    21.7041,
    21.4884,
    21.1518,
    20.9222,
    20.612,
    20.3855,
    20.1385,
    19.916,
    19.3451,
    19.1242,
    18.9597,
    18.737,
    18.5981,
    18.4101,
    18.2774,
    18.1029,
    17.9909,
    17.834,
    17.6871,
    17.5812,
    17.4356,
    17.307,
    17.1929,
    17.0649,
    16.9361,
    16.8011,
    16.6559,
    16.4617,
    16.2664,
    16.2099,
    16.0496,
    15.8575,
    15.7009,
    15.5637,
    15.394,
    15.2968,
    15.1457,
    14.9747,
    14.799,
    14.6857,
    14.5677,
    14.4791,
    14.4133,
    14.3424,
    14.2129,
    14.3913,
    14.2574,
    14.0806,
    14.2884,
    14.4393,
    14.6568,
    14.8967,
    15.1814,
    15.3338,
    15.4216,
    15.4097,
    15.4906,
    15.8898,
    15.9215,
    16.0049,
    16.2547,
    16.4636,
    16.7456,
    16.9875,
    17.2393,
    17.503,
    17.798,
    18.217,
    18.5914,
    18.9575,
    19.2248,
    19.4027,
    19.532,
    19.7233,
    19.741,
    19.7747,
    19.7831,
    19.7897,
    19.7785,
    19.7862,
    19.7944,
    19.8485,
    19.9381,
    19.9853,
    20.0435,
    20.0974,
    20.1443,
    20.162,
    20.2339,
    20.2903,
    20.3603,
    20.462,
    20.6469,
    20.8926,
    21.0773,
    21.2909,
    21.4697,
    21.5695,
    21.6247,
    21.6756,
    21.7606,
    21.7969,
    21.8074,
    21.9706,
    22.2627,
    22.4158,
    22.784,
    23.1268,
    23.974,
    24.268,
    24.5506,
    24.8688,
    25.1627,
    25.3902,
    25.6823,
    25.9251,
    26.2091,
    26.4619,
    26.7014,
    27.0243,
    27.2648,
    27.5099,
    27.852,
    28.2415,
    28.5507,
    29.4329,
    30.355,
    30.6492,
    30.9284,
    31.2249,
    31.5316,
    31.823,
    32.1003,
    32.3733,
    32.6276,
    32.8664,
    33.1395,
    33.3907,
    33.6747,
    33.9781,
    34.2912,
    34.6099,
    34.9773,
    35.2784,
    35.6434,
    35.9993,
    36.3529,
    36.7086,
    37.0629,
    37.4034,
    37.7423,
    38.0868,
    38.376,
    38.6315,
    38.8231,
    38.876,
    38.9012,
    38.8649,
    38.7859,
    38.6463,
    38.5462,
    38.5161,
    38.5088,
    38.5816,
    38.7336,
    38.2579,
    38.5838,
    39.1325,
    38.1609,
    38.2093,
    38.3417,
    38.4986,
    38.6493,
    38.7143,
    38.8058,
    39.019,
    39.2756,
    39.5634,
    39.8069,
    39.9798,
    40.0603,
    40.2411,
    40.2877,
    40.466,
    40.5301,
    40.5937,
    40.6732,
    40.7492,
    40.8242,
    40.8913,
    40.9513,
    41.0294,
  ];
  var thoughts = [
    0.498486,
    0.464515,
    0.393183,
    0.410027,
    0.339908,
    0.387023,
    0.368718,
    0.331637,
    0.407777,
    0.602318,
    1.33116,
    1.72535,
    2.81139,
    4.28282,
    6.32298,
    8.43065,
    9.87559,
    11.5022,
    12.0053,
    11.8427,
    12.889,
    13.562,
    14.7597,
    16.1935,
    17.308,
    18.1071,
    18.6871,
    18.814,
    17.7276,
    16.8997,
    16.4518,
    16.2056,
    15.9027,
    15.8382,
    15.8525,
    15.8117,
    15.7213,
    15.6188,
    15.5422,
    15.4539,
    15.3148,
    15.2471,
    15.2735,
    15.27,
    15.2054,
    15.3557,
    15.6282,
    16.1734,
    16.6554,
    17.3421,
    17.8313,
    21.8054,
    23.0846,
    24.5068,
    26.1467,
    27.6689,
    28.5339,
    29.7781,
    31.2585,
    32.3261,
    35.7383,
    38.6785,
    40.1607,
    40.8232,
    42.0643,
    42.8014,
    43.8396,
    44.5799,
    45.1576,
    45.8679,
    46.6798,
    47.2482,
    47.6237,
    48.2893,
    48.836,
    49.2747,
    49.6424,
    49.914,
    50.4725,
    50.7423,
    50.9941,
    51.1824,
    51.5607,
    51.8022,
    52.1412,
    52.3955,
    52.628,
    52.8234,
    53.3841,
    53.5812,
    53.7298,
    53.9431,
    54.0514,
    54.2177,
    54.3276,
    54.4674,
    54.5349,
    54.656,
    54.7654,
    54.8466,
    54.9687,
    55.175,
    55.3135,
    55.4358,
    55.5247,
    55.5832,
    55.6417,
    55.8022,
    55.9483,
    55.7075,
    55.7423,
    55.8586,
    55.9003,
    55.8944,
    56.0062,
    55.9011,
    55.9856,
    56.1335,
    56.3249,
    56.3445,
    56.3888,
    56.3528,
    56.2347,
    56.1193,
    56.1981,
    54.7923,
    54.908,
    55.1702,
    54.1642,
    53.3313,
    52.2397,
    51.115,
    49.8506,
    49.0245,
    48.3709,
    48.0714,
    47.4861,
    45.2415,
    44.8805,
    44.3771,
    43.3147,
    42.3811,
    41.1551,
    40.1192,
    39.0864,
    38.1398,
    37.1261,
    35.7321,
    34.5781,
    33.4267,
    32.6156,
    32.1038,
    31.7439,
    31.0746,
    30.966,
    30.8824,
    30.86,
    30.8355,
    30.8483,
    30.8115,
    30.8301,
    30.726,
    30.5626,
    30.598,
    30.5298,
    30.4768,
    30.4452,
    30.4935,
    30.3905,
    30.3176,
    30.2442,
    30.0467,
    29.5831,
    28.9815,
    28.5953,
    28.1115,
    27.7536,
    27.593,
    27.6099,
    27.6227,
    27.5438,
    27.6447,
    27.8399,
    27.5475,
    26.8244,
    26.5707,
    25.6202,
    24.8272,
    23.8428,
    23.6956,
    23.5934,
    23.4991,
    23.5509,
    23.7895,
    23.9152,
    24.2058,
    24.4315,
    24.7699,
    25.1689,
    25.2786,
    25.7091,
    26.1103,
    26.273,
    26.3701,
    26.6824,
    27.6847,
    28.6106,
    28.8914,
    29.2695,
    29.6496,
    30.0346,
    30.55,
    31.136,
    31.7643,
    32.4457,
    33.1534,
    33.8745,
    34.5733,
    35.2199,
    35.8037,
    36.4164,
    36.9007,
    37.3795,
    37.9207,
    38.3476,
    38.8258,
    39.3134,
    39.8166,
    40.3136,
    40.758,
    41.2313,
    41.6789,
    42.1063,
    42.5802,
    43.095,
    43.7442,
    44.4362,
    45.1482,
    45.8812,
    46.6748,
    47.3661,
    47.9374,
    48.4456,
    48.8171,
    49.0348,
    50.5538,
    50.371,
    49.7813,
    51.1397,
    51.0679,
    50.869,
    50.6131,
    50.3379,
    50.147,
    49.8933,
    49.4828,
    48.9976,
    48.4597,
    47.9746,
    47.5617,
    47.2833,
    46.565,
    46.0702,
    45.432,
    45.2194,
    45.0057,
    44.7738,
    44.548,
    44.3162,
    44.1115,
    43.915,
    43.7051,
  ];
  List<double> HR = [
    63,
    64,
    63,
    64,
    64,
    63,
    62,
    63,
    61,
    63,
    62,
    62,
    61,
    62,
    61,
    65,
    64,
    58,
    68,
    65,
    67,
    67,
    65,
    65,
    64,
    64,
    61,
    60,
    61,
    62,
    63,
    63,
    62,
    65,
    64,
    64,
    64,
    65,
    64,
    64,
    65,
    65,
    63,
    65,
    65,
    67,
    67,
    67,
    65,
    67,
    68,
    67,
    70,
    69,
    67,
    67,
    67,
    69,
    64,
    64,
    62,
    67,
    69,
    68,
    69,
    67,
    68,
    65,
    70,
    68,
    65,
    68,
    67,
    68,
    67,
    64,
    69,
    65,
    65,
    63,
    67,
    67,
    67,
    69,
    67,
    67,
    64,
    69,
    68,
    72,
    68,
    69,
    68,
    69,
    65,
    67,
    67,
    65,
    67,
    65,
    67,
    68,
    65,
    67,
    65,
    67,
    65,
    64,
    67,
    65,
    64,
    65,
    62,
    65,
    63,
    65,
    63,
    64,
    65,
    64,
    65,
    67,
    64,
    65,
    64,
    57,
    68,
    69,
    70,
    69,
    70,
    68,
    64,
    63,
    65,
    65,
    65,
    63,
    69,
    69,
    70,
    70,
    68,
    69,
    65,
    68,
    65,
    69,
    70,
    69,
    67,
    67,
    64,
    63,
    69,
    65,
    68,
    67,
    65,
    67,
    63,
    67,
    64,
    67,
    65,
    69,
    68,
    67,
    67,
    67,
    67,
    65,
    65,
    64,
    67,
    67,
    69,
    70,
    69,
    72,
    68,
    69,
    65,
    67,
    61,
    61,
    62,
    61,
    63,
    65,
    64,
    62,
    64,
    62,
    64,
    64,
    64,
    63,
    67,
    63,
    65,
    65,
    65,
    65,
    67,
    63,
    72,
    72,
    73,
    73,
    69,
    67,
    65,
    64,
    65,
    62,
    65,
    64,
    67,
    64,
    70,
    67,
    69,
    70,
    68,
    68,
    65,
    65,
    69,
    65,
    65,
    70,
    69,
    70,
    75,
    70,
    72,
    72,
    69,
    69,
    68,
    67,
    65,
    67,
    65,
    59,
    70,
    68,
    69,
    68,
    68,
    67,
    64,
    61,
    62,
    60,
    60,
    62,
    61,
    63,
    63,
    65,
    65,
    69,
    72,
    67,
    69,
    62,
    65,
    65,
    67,
    65,
  ];


  formData(){
    for(var i=0; i<stress.length;i++){
      // if(stress[i]+relax[i]+thoughts[i]<100) {
        stress[i] = 100;
      // }
      // log("stress value "+ stress[i].toStringAsFixed(2));
      relax[i] = 100-(relax[i]);
      thoughts[i] = 100-(relax[i]+thoughts[i]);
    }
    log("stress"+ relax.toString());
  }
  // void _startUpdatingData() {
  //   _timer = Timer.periodic(Duration(seconds: 1), (timer) {
  //     setState(() {
  //       // xValue++;
  //       // stressData.add((xValue % 10) * 5 + 10);
  //       // relaxData.add((xValue % 15) * 3 + 20);
  //       // calmData.add((xValue % 20) * 2 + 30);
  //       // hrData.add((xValue % 25) * 1 + 15);
  //
  //       if (stress.length > 45) {
  //         stress.removeAt(0);
  //         if(stress.last<30) {
  //           stress.add(stress.last+4);
  //         }
  //         else{
  //           stress = [
  //             57.5327,
  //             62.8309,
  //             71.4524,
  //             71.4524,
  //             71.4524,
  //             84.4543,
  //             85.9156,
  //             87.7717,
  //             89.204,
  //             89.5139,
  //             43.8788,
  //             32.1724,
  //             36.4059,
  //             37.6038,
  //             39.54,
  //             40.347,
  //             40.7922,
  //             41.2776,
  //             41.6841,
  //             42.1579,
  //             42.4535,
  //             42.7498,
  //             42.9856,
  //             43.1092,
  //             43.2082,
  //             43.2827,
  //             43.3858,
  //             43.4664,
  //             43.451,
  //             43.299,
  //             42.9968,
  //             42.8576,
  //             42.9449,
  //             43.4086,
  //             43.2276,
  //             43.1232,
  //             42.9688,
  //             42.8136,
  //             42.4115,
  //             42.3055,
  //             42.1592,
  //             42.0362,
  //             41.9106,
  //             41.7412,
  //             41.6091,
  //             41.4499,
  //             41.3182,
  //             41.2248,
  //             41.1014,
  //           ];
  //         }
  //         // relax.removeAt(0);
  //         // calm.removeAt(0);
  //         // hrData.removeAt(0);
  //         // thoughts.removeAt(0);
  //       }
  //       if (relax.length > 45) {
  //         relax.removeAt(0);
  //         if(stress.last<35) {
  //           relax.add(relax.last+0.8);
  //         }
  //         else{
  //           relax = [
  //             33.0803,
  //             33.0556,
  //             24.3021,
  //             20.2284,
  //             16.3499,
  //             14.4042,
  //             12.2608,
  //             11.3052,
  //             10.039,
  //             9.26538,
  //             13.911,
  //             19.9762,
  //             30.9524,
  //             34.317,
  //             37.9079,
  //             39.712,
  //             40.645,
  //             41.3827,
  //             41.8695,
  //             42.2399,
  //             42.3991,
  //             42.5236,
  //             42.6317,
  //             42.6844,
  //             42.6945,
  //             42.6854,
  //             42.6388,
  //             42.5759,
  //             42.4382,
  //             42.0612,
  //             41.6927,
  //             41.507,
  //             41.4364,
  //             42.2042,
  //             42.2666,
  //             42.3592,
  //             42.4902,
  //             42.63,
  //             43.1516,
  //             43.2882,
  //             43.4555,
  //             43.5699,
  //             43.6896,
  //             43.8482,
  //             43.9594,
  //             44.1096,
  //             44.2648,
  //             44.3764,
  //             44.5127,
  //           ];
  //         }
  //         // relax.removeAt(0);
  //         // calm.removeAt(0);
  //         // hrData.removeAt(0);
  //         // thoughts.removeAt(0);
  //       }
  //
  //       if (calm.length > 45) {
  //         calm.removeAt(0);
  //         if(calm.last<2) {
  //           calm.add(calm.last+0.2);
  //         }
  //         else{
  //           calm = [
  //             0.574982,
  //             0.526105,
  //             0.340116,
  //             0.260616,
  //             0.19882,
  //             0.170556,
  //             0.142708,
  //             0.128802,
  //             0.11254,
  //             0.103508,
  //             0.317032,
  //             0.620912,
  //             0.850202,
  //             0.912595,
  //             0.958723,
  //             0.984261,
  //             0.996392,
  //             1.00255,
  //             1.00445,
  //             1.00195,
  //             0.998719,
  //             0.994709,
  //             0.991767,
  //             0.990145,
  //             0.98811,
  //             0.986201,
  //             0.982783,
  //             0.979513,
  //             0.976691,
  //             0.971413,
  //             0.969671,
  //             0.968488,
  //             0.964875,
  //             0.972254,
  //             0.977769,
  //             0.982283,
  //             0.988862,
  //             0.99571,
  //             1.01745,
  //             1.02323,
  //             1.03075,
  //             1.03648,
  //             1.04245,
  //             1.05048,
  //             1.05649,
  //             1.06417,
  //             1.07132,
  //             1.07645,
  //             1.083,
  //           ];
  //         }
  //         // relax.removeAt(0);
  //         // calm.removeAt(0);
  //         // hrData.removeAt(0);
  //         // thoughts.removeAt(0);
  //       }
  //       if (HR.length > 45) {
  //         HR.removeAt(0);
  //         if(HR.last<75) {
  //           HR.add(HR.last+3);
  //         }
  //         else{
  //           HR = [
  //             60,
  //             68,
  //             68,
  //             67,
  //             75,
  //             65,
  //             64,
  //             62,
  //             65,
  //             51,
  //             73,
  //             64,
  //             70,
  //             65,
  //             65,
  //             62,
  //             68,
  //             69,
  //             67,
  //             70,
  //             67,
  //             65,
  //             68,
  //             67,
  //             67,
  //             64,
  //             69,
  //             69,
  //             72,
  //             73,
  //             68,
  //             70,
  //             45,
  //             63,
  //             64,
  //             63,
  //             70,
  //             60,
  //             68,
  //             72,
  //             72,
  //             70,
  //             70,
  //             69,
  //             67,
  //             65,
  //             65,
  //             70,
  //           ];
  //         }
  //         // relax.removeAt(0);
  //         // calm.removeAt(0);
  //         // hrData.removeAt(0);
  //         // thoughts.removeAt(0);
  //       }
  //       if (thoughts.length > 45) {
  //         thoughts.removeAt(0);
  //         if(thoughts.last<50) {
  //           thoughts.add(thoughts.last+1.5);
  //         }
  //         else{
  //           thoughts =  [
  //             9.38701,
  //             4.11352,
  //             4.2455,
  //             2.15395,
  //             1.41539,
  //             1.14148,
  //             1.82355,
  //             0.923151,
  //             0.756953,
  //             1.22076,
  //             42.2102,
  //             47.8514,
  //             32.6417,
  //             28.0792,
  //             22.5521,
  //             19.9411,
  //             18.5628,
  //             17.3397,
  //             16.4464,
  //             15.6022,
  //             15.1474,
  //             14.7266,
  //             14.3827,
  //             14.2064,
  //             14.0973,
  //             14.0319,
  //             13.9755,
  //             13.9576,
  //             14.1109,
  //             14.6398,
  //             15.3105,
  //             15.6354,
  //             15.6187,
  //             14.3873,
  //             14.5058,
  //             14.5176,
  //             14.5411,
  //             14.5564,
  //             14.4369,
  //             14.4063,
  //             14.3852,
  //             14.394,
  //             14.3998,
  //             14.4107,
  //             14.4315,
  //             14.4404,
  //             14.417,
  //             14.3988,
  //             14.3859,
  //           ];
  //         }
  //         // relax.removeAt(0);
  //         // calm.removeAt(0);
  //         // hrData.removeAt(0);
  //         // thoughts.removeAt(0);
  //       }
  //     });
  //
  //     _scrollController.animateTo(
  //       _scrollController.position.maxScrollExtent,
  //       duration: Duration(seconds: 1,milliseconds: 500),
  //       curve: Curves.linear,
  //     );
  //   });
  // }

  @override
  void dispose() {
    _timer.cancel();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Scrolling Graph')),
      body: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        controller: _scrollController,
        child: Column(
          children: [
            // CustomPaint(
            //   size: Size(500, 300),
            //   // size: Size(500, 300),
            //   painter: GraphPainter(
            //     stressData: stressData,
            //     relaxData: relaxData,
            //     calmData: calmData,
            //     hrData: hrData,
            //   ),
            // ),
            SizedBox(
              height: MediaQuery.of(context).size.height *0.4,
              width: MediaQuery.of(context).size.width *6.5,
              child: Stack(
                children: [
                  Sparkline(
                    lineColor: Colors.red.shade200,
                    data: stress,
                    fillMode: FillMode.above,
                    fillColor: Colors.red.shade200,
                    useCubicSmoothing: true,
                    cubicSmoothingFactor: 0.2,
                  ),
                  Sparkline(
                    lineColor: Colors.green.shade200,
                    data: relax,
                    fillMode: FillMode.below,
                    fillColor: Colors.green.shade200,
                    useCubicSmoothing: true,
                    cubicSmoothingFactor: 0.2,
                  ),

                  Sparkline(
                    lineColor: Colors.blue.shade200,
                    data: thoughts,
                    fillMode: FillMode.below,
                    fillColor: Colors.blue.shade200,
                    useCubicSmoothing: true,
                    cubicSmoothingFactor: 0.2,
                  ),
                  Sparkline(
                    lineColor: Colors.black,
                    data: calm,
                    lineWidth: 2,
                    useCubicSmoothing: true,
                    cubicSmoothingFactor: 0.2,
                    // fillMode: FillMode.below,
                    // fillColor: Colors.red.shade200,
                  ),
                  Sparkline(
                    lineColor: Colors.blue.shade900,
                    data: HR,
                    lineWidth: 2,
                    useCubicSmoothing: true,
                    cubicSmoothingFactor: 0.2,
                    // fillMode: FillMode.below,
                    // fillColor: Colors.red.shade200,
                  ),
                ],
              ),
            ),
            SizedBox(
              height: 20,
            ),
            Column(
              children: [
                SizedBox(
                  width: MediaQuery.of(context).size.width * 0.9,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 38.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            Container(
                              height: 20,
                              width: 20,
                              color: Colors.red.shade300,
                            ),
                            SizedBox(
                              width: 5,
                            ),
                            Text("Stress:${stress.last.toStringAsFixed(1)}")
                          ],
                        ),
                        Row(
                          children: [
                            Container(
                              height: 20,
                              width: 20,
                              color: Colors.green.shade200,
                            ),
                            SizedBox(
                              width: 5,
                            ),
                            Text("Relax:${relax.last.toStringAsFixed(1)}")
                          ],
                        ),
                        Row(
                          children: [
                            Container(
                              height: 20,
                              width: 20,
                              color: Colors.blue.shade200,
                            ),
                            SizedBox(
                              width: 5,
                            ),
                            Text("Thoughts:${thoughts.last.toStringAsFixed(1)}")
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                SizedBox(
                  height: 10,
                ),
                SizedBox(
                  width: MediaQuery.of(context).size.width * 0.9,
                  child: Padding(
                    padding: const EdgeInsets.only(left: 38.0),
                    child: Row(
                      children: [
                        Row(
                          children: [
                            Container(
                              height: 20,
                              width: 20,
                              color: Colors.black,
                            ),
                            SizedBox(
                              width: 5,
                            ),
                            Text("Calm:${calm.last.toStringAsFixed(1)}")
                          ],
                        ),
                        SizedBox(
                          width: 20,
                        ),
                        Row(
                          children: [
                            Container(
                              height: 20,
                              width: 20,
                              color: Colors.blue.shade900,
                            ),
                            SizedBox(
                              width: 5,
                            ),
                            Text("HR:${HR.last.toStringAsFixed(1)}")
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
